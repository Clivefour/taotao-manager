<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util 
	http://www.springframework.org/schema/util/spring-util-4.0.xsd">

	<!-- 加载配置文件
		spring的配置文件 都需要加入 classpath:为前缀、
		*.properties 加载 任意开头的 但是以.properties结尾的文件
		吧db.properties和log4j.properties都加载到了spring容器中
		受spring所管理
		以key=value的形式 存储这两个文件
		jdbc.driver=com.mysql.jdbc.Driver
		   kye				value
		
	 -->
	<context:property-placeholder location="classpath:*.properties" />
	<!-- 加载数据库连接池 通过 spring的ioc来创建数据库连接池对象
		并且在创建对象的时候 赋初值
		${jdbc.url}从spring容器中 根据key 取value
		为什么要这样写呢 ？
		因为写到配置文件里面了以后 如果java代码里面也要根据key取value 我们可以直接取
		而且 某一天 如果数据库发生了改变
	 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="minIdle" value="${jdbc.minIdle}" />
	</bean>

	<!-- mapper配置 -->
	<!-- 让spring管理sqlsessionfactory 使用mybatis和spring整合包中的 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 数据库连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 加载mybatis的全局配置文件 -->
		<property name="configLocation" value="classpath:SqlMapConfig.xml" />
	</bean>
	<!-- 配置Mapper扫描器 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.clive.mapper" />
	</bean>
	<!-- 整合service层 1.开启扫描service包下面的所有spring注解 2.开启申明式事务管理 -->
	<context:component-scan base-package="com.clive.service" />
	<!-- 事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 传播行为
				这里配置的是 事务的隔离级别和传播行为
				默认是不用配置隔离级别的  默认使用4 作为隔离级别就行了
				传播行为 也是用默认的  一个方法里面有两个事务  使用同一个事务 还是分开使用
			 -->
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- 切面 
		事务管理器的作用范围
	-->
	<aop:config>
		<aop:advisor advice-ref="txAdvice"
			pointcut="execution(* com.clive.service.*.*(..))" />
	</aop:config>


</beans>

